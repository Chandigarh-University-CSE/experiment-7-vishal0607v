Experiment : 1


class Solution {
public:
    int minOperations(vector<int>& nums) {
        int a=0;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i+1]<=nums[i]) {
                a+=(nums[i]-nums[i+1])+1;
                nums[i+1]=nums[i]+1;}
        }
        return a;
    }
};


Experiment : 2

class Solution {
public:
bool static help(int x,int y)
{
    return x>y;
}
    int minStoneSum(vector<int>& piles, int k) {
        
        int n=piles.size();
        priority_queue<int,vector<int>>pq(piles.begin(),piles.end());
        int ans=accumulate(piles.begin(),piles.end(),0);
        int i=0;
        while(k>0 && !pq.empty())
        {
            int temp=pq.top();
            pq.pop();
            ans-=(temp/2);
            pq.push(temp-temp/2);
            k--;
        }
        return ans;
    }
};

Experiment : 3

class Solution {
public:
    bool check(vector<int>& tasks, vector<int>& workers, int pills, int strength,int index)
    {
        multiset<int> st;
        for(auto it:workers)
        {
            st.insert(it);
        }
        for(int i=index-1;i>=0;i--)
        {
            auto it=st.lower_bound(tasks[i]);
            if(it!=st.end())
            {
                st.erase(it);
            }
            else
            {
                if(pills<=0)
                {
                    return false;
                }
                else
                {
                    it=st.lower_bound(tasks[i]-strength);
                    if(it!=st.end())
                    {
                        st.erase(it);
                        pills--;
                    }
                    else
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    int maxTaskAssign(vector<int>& tasks, vector<int>& workers, int pills, int strength) {
        sort(tasks.begin(),tasks.end());
        sort(workers.begin(),workers.end());
        int low=0;
        int high=min(workers.size(),tasks.size());
        while(low<high)
        {
            int mid=(low+high+1)/2;
            if(check(tasks,workers,pills,strength,mid)==true)
            {
                low=mid;
            }
            else
            {
                high=mid-1;
            }
        }
        return high;
    }
};
